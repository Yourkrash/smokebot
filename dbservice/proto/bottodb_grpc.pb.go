// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dbservice/proto/bottodb.proto

package dbservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegService_RegUser_FullMethodName   = "/proto.RegService/RegUser"
	RegService_IsRegUser_FullMethodName = "/proto.RegService/IsRegUser"
)

// RegServiceClient is the client API for RegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegServiceClient interface {
	RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	IsRegUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoolResponse, error)
}

type regServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegServiceClient(cc grpc.ClientConnInterface) RegServiceClient {
	return &regServiceClient{cc}
}

func (c *regServiceClient) RegUser(ctx context.Context, in *RegUserRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, RegService_RegUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regServiceClient) IsRegUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, RegService_IsRegUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegServiceServer is the server API for RegService service.
// All implementations must embed UnimplementedRegServiceServer
// for forward compatibility.
type RegServiceServer interface {
	RegUser(context.Context, *RegUserRequest) (*ErrorResponse, error)
	IsRegUser(context.Context, *UserID) (*BoolResponse, error)
	mustEmbedUnimplementedRegServiceServer()
}

// UnimplementedRegServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegServiceServer struct{}

func (UnimplementedRegServiceServer) RegUser(context.Context, *RegUserRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegUser not implemented")
}
func (UnimplementedRegServiceServer) IsRegUser(context.Context, *UserID) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRegUser not implemented")
}
func (UnimplementedRegServiceServer) mustEmbedUnimplementedRegServiceServer() {}
func (UnimplementedRegServiceServer) testEmbeddedByValue()                    {}

// UnsafeRegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegServiceServer will
// result in compilation errors.
type UnsafeRegServiceServer interface {
	mustEmbedUnimplementedRegServiceServer()
}

func RegisterRegServiceServer(s grpc.ServiceRegistrar, srv RegServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegService_ServiceDesc, srv)
}

func _RegService_RegUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServiceServer).RegUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegService_RegUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServiceServer).RegUser(ctx, req.(*RegUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegService_IsRegUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServiceServer).IsRegUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegService_IsRegUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServiceServer).IsRegUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// RegService_ServiceDesc is the grpc.ServiceDesc for RegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RegService",
	HandlerType: (*RegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegUser",
			Handler:    _RegService_RegUser_Handler,
		},
		{
			MethodName: "IsRegUser",
			Handler:    _RegService_IsRegUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice/proto/bottodb.proto",
}
